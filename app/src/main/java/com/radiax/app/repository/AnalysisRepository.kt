package com.radiax.app.repository

import com.google.gson.JsonSyntaxException
import com.radiax.app.models.AnalysisResponse
import com.radiax.app.network.RetrofitClient
import com.radiax.app.utils.NetworkResult
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import okhttp3.MediaType.Companion.toMediaTypeOrNull
import okhttp3.MultipartBody
import okhttp3.RequestBody.Companion.toRequestBody
import retrofit2.HttpException
import java.io.IOException

class AnalysisRepository {
    suspend fun analyzeImage(imageBytes: ByteArray): NetworkResult<String> {
        return withContext(Dispatchers.IO) {
            try {
                val requestFile = imageBytes.toRequestBody("image/jpeg".toMediaTypeOrNull())
                val body = MultipartBody.Part.createFormData("file", "image.jpg", requestFile)

                println("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä. –†–∞–∑–º–µ—Ä: ${imageBytes.size} –±–∞–π—Ç")

                val response = RetrofitClient.instance.analyzeImage(body)

                val rawResponse = response.body()?.toString() ?: "null"
                println("üì• –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –≤ —ç–º—É–ª—è—Ç–æ—Ä–µ: $rawResponse")

                if (response.isSuccessful && response.body() != null) {
                    val responseBody = response.body()

                    // ‚úÖ –ë–µ—Ä—ë–º `result` –≤–º–µ—Å—Ç–æ `messages[]`
                    val content = responseBody?.result

                    return@withContext if (!content.isNullOrEmpty()) {
                        println("‚úÖ –ò—Ç–æ–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑: $content")
                        NetworkResult.Success(content)
                    } else {
                        println("‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
                        NetworkResult.Error("–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
                    }
                } else {
                    val errorBody = response.errorBody()?.string() ?: "Unknown error"
                    println("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.code()} - $errorBody")
                    return@withContext NetworkResult.Error("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.code()} - $errorBody")
                }
            } catch (e: IOException) {
                e.printStackTrace()
                return@withContext NetworkResult.Error("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")
            } catch (e: HttpException) {
                println("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${e.code()} - ${e.message()}")
                return@withContext NetworkResult.Error("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${e.code()} - ${e.message()}")
            } catch (e: JsonSyntaxException) {
                println("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: ${e.message}")
                return@withContext NetworkResult.Error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞")
            } catch (e: Exception) {
                println("‚ùó –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: ${e.localizedMessage}")
                return@withContext NetworkResult.Error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: ${e.localizedMessage}")
            }
        }
    }
}